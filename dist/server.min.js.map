{"version":3,"sources":["server.js"],"names":["express","require","bodyParser","db","app","use","json","PORT","process","env","console","log","concat","post","req","res","_req$body","body","customer_id","shipping_contact_mech_id","billing_contact_mech_id","order_items","order_date","Array","isArray","status","error","err","result","orderId","insertId","orderItemsValues","map","item","product_id","quantity","query","message","get","params","order_id","results","orderDetails","items","_objectSpread"],"mappings":"wuBACA,IAAMA,QAAUC,QAAQ,WAClBC,WAAaD,QAAQ,eACrBE,GAAKF,QAAQ,QAEbG,IAAMJ,UACZI,IAAIC,IAAIH,WAAWI,QANnB,IAAAC,KAAAC,QAAAC,IAAAF,MAAA,IAEAH,IAAMF,OAAAA,KAAaD,WAUfS,QAAQC,IAAR,6BAAAC,OAAyCL,SAM7CH,IAAIS,KAAK,UAAW,SAACC,EAAKC,GAAQ,IAAAC,EAPXF,EAAAG,KAAZV,EAOuBS,EAPvBT,WAAMW,EAOiBF,EAPjBE,YAAMC,EAOWH,EAPXG,yBAAAC,EAOWJ,EAPXI,wBAAAC,EAOWL,EAPXK,YAMvB,KAAAC,GAAAJ,GAAAC,GAAAC,GAAAC,GAAAE,MAAAC,QAAAH,IAMQ,OAAON,EAAIU,OAAO,KAAKnB,KAAK,CAAEoB,MAAO,uBALXvB,GAC6BiB,MAD7B,4HAAA,CAAAE,EAC6BF,EAAAA,EAD7BA,GAAA,SAAAO,EAAAC,GACsDP,GAAAA,EAY5E,OAAON,EAAIU,OAAO,KAAKnB,KAAK,CAAEoB,MAAO,+CARXA,IAAOG,EAAAD,EAAAE,SAe/BC,EAAmBV,EAAYW,IAAI,SAAAC,GAAI,MAAI,CAACJ,EAASI,EAAKC,WAAYD,EAAKE,SAAUF,EAAKR,UAR5FE,GAAJS,MAOqB,2EAPZ,CAAAL,GAAA,SAAAJ,GACL,GAAUA,EAA2B,OAAAZ,EAAAU,OAAA,KAAAnB,KAAA,CAAAoB,MAAA,8CAGnCG,EAAOJ,OAAGG,KAAOE,KAAvB,CAAiCO,QAAA,6BAAAR,QAAAA,UAIYzB,IAAAkC,IAE7C,oBAAA,SAAAxB,EAAAC,GAcJ,IAAMc,EAAUf,EAAIyB,OAAOC,SA0BWd,GAAAA,MArCR,k2BAqCe,CAAAG,GAAA,SAAAF,EAAAc,GAArC,GAAAd,EACH,OAAAZ,EAAAU,OAAA,KAAAnB,KAAA,CAAAoB,MAAA,kDAGG,GAAuBpB,IAAvBmC,EAAWhB,OAAmBC,OAAOX,EAAAU,OAAA,KAAAnB,KAAA,CAAAoB,MAAA,oBAGzC,IAAMgB,EAAeD,EAAQ,GAoB7BtC,GAAGiC,MAjBkB,6cAiBK,CAACP,GAAU,SAACF,EAAKgB,GACvC,GAAIhB,EACA,OAAOZ,EAAIU,OAAO,KAAKnB,KAAK,CAAEoB,MAAO,gDAIzCX,EAAIU,OAAO,KAAKnB,KAAhBsC,cAAA,GACOF,EADP,CAEIC,MAAOA","file":"server.min.js","sourcesContent":["// server.js\r\nconst express = require('express');\r\nconst bodyParser = require('body-parser');\r\nconst db = require('./db');\r\n\r\nconst app = express();\r\napp.use(bodyParser.json());\r\n\r\nconst PORT = process.env.PORT || 3000;\r\n\r\n// Start the server\r\napp.listen(PORT, () => {\r\n    console.log(`Server is running on port ${PORT}`);\r\n});\r\n\r\n// server.js (continued)\r\n\r\n// POST /orders - Create a new order\r\napp.post('/orders', (req, res) => {\r\n    const { order_date, customer_id, shipping_contact_mech_id, billing_contact_mech_id, order_items } = req.body;\r\n\r\n    // Validate input\r\n    if (!order_date || !customer_id || !shipping_contact_mech_id || !billing_contact_mech_id || !order_items || !Array.isArray(order_items)) {\r\n        return res.status(400).json({ error: 'Invalid input data' });\r\n    }\r\n\r\n    // Insert into Order_Header table\r\n    const orderHeaderQuery = `INSERT INTO Order_Header (order_date, customer_id, shipping_contact_mech_id, billing_contact_mech_id) VALUES (?, ?, ?, ?)`;\r\n    \r\n    db.query(orderHeaderQuery, [order_date, customer_id, shipping_contact_mech_id, billing_contact_mech_id], (err, result) => {\r\n        if (err) {\r\n            return res.status(500).json({ error: 'Database error while creating order header' });\r\n        }\r\n\r\n        const orderId = result.insertId; // Get the newly created order ID\r\n\r\n        // Prepare to insert order items\r\n        const orderItemsQuery = `INSERT INTO Order_Item (order_id, product_id, quantity, status) VALUES ?`;\r\n        const orderItemsValues = order_items.map(item => [orderId, item.product_id, item.quantity, item.status]);\r\n\r\n        // Insert all order items\r\n        db.query(orderItemsQuery, [orderItemsValues], (err) => {\r\n            if (err) {\r\n                return res.status(500).json({ error: 'Database error while creating order items' });\r\n            }\r\n\r\n            // Respond with success message and created order details\r\n            res.status(201).json({ message: 'Order created successfully', orderId });\r\n        });\r\n    });\r\n});\r\n\r\n// GET /orders/:order_id - Retrieve details of a specific order\r\napp.get('/orders/:order_id', (req, res) => {\r\n    const orderId = req.params.order_id;\r\n\r\n    // SQL query to retrieve order details\r\n    const orderDetailQuery = `\r\n        SELECT \r\n            oh.order_id,\r\n            oh.order_date AS \"date\",\r\n            c.first_name AS \"firstName\",\r\n            c.last_name AS \"lastName\",\r\n            CONCAT(cm1.street_address,' ', cm1.city,' ', cm1.state,' ', cm1.postal_code) AS \"shippingAddress\",\r\n            cm1.phone_number AS \"shippingContact\",\r\n            cm1.email AS \"shippingEmail\",\r\n            CONCAT(cm2.street_address,' ',cm2.city,' ', cm2.state,' ',cm2.postal_code) AS \"billingAddress\"\r\n        FROM \r\n            Order_Header AS oh \r\n        JOIN \r\n            Customer AS c ON oh.customer_id = c.customer_id \r\n        JOIN \r\n            Contact_Mech AS cm1 ON oh.shipping_contact_mech_id = cm1.contact_mech_id \r\n        JOIN \r\n            Contact_Mech AS cm2 ON oh.billing_contact_mech_id = cm2.contact_mech_id \r\n        WHERE \r\n            oh.order_id = ?`;\r\n\r\n    db.query(orderDetailQuery, [orderId], (err, results) => {\r\n        if (err) {\r\n            return res.status(500).json({ error: 'Database error while retrieving order details' });\r\n        }\r\n        \r\n        if (results.length === 0) {\r\n            return res.status(404).json({ error: 'Order not found' });\r\n        }\r\n\r\n        const orderDetails = results[0]; // Get the first result as we expect one record\r\n\r\n        // Query to retrieve associated order items\r\n        const orderItemsQuery = `\r\n            SELECT \r\n                oi.order_item_seq_id,\r\n                oi.order_id,\r\n                oi.product_id,\r\n                oi.quantity,\r\n                oi.status,\r\n                p.product_name,\r\n                p.color,\r\n                p.size\r\n            FROM \r\n                Order_Item AS oi \r\n            INNER JOIN \r\n                Product AS p ON oi.product_id = p.product_id \r\n            WHERE \r\n                oi.order_id = ?`;\r\n\r\n        db.query(orderItemsQuery, [orderId], (err, items) => {\r\n            if (err) {\r\n                return res.status(500).json({ error: 'Database error while retrieving order items' });\r\n            }\r\n\r\n            // Combine the results and send response\r\n            res.status(200).json({\r\n                ...orderDetails,\r\n                items: items // Include the associated items in the response\r\n            });\r\n        });\r\n    });\r\n});\r\n"]}